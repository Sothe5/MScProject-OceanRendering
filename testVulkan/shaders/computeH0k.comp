#version 450
#extension GL_ARB_separate_shader_objects : enable
#define PI  3.1415926535897932384626433832795

float gravity = 9.8;

layout( push_constant ) uniform pushConstants {
  int fourierGridSize;
  int spatialDimension;
  vec2 windDirection;
  float windSpeed;
  float scalePhillips;
} pc;

struct GaussianNoise
{
	vec4 gaussianNoiseVector;
};

layout(std140, binding = 3) buffer StorageBufferGaussianNoise {	
   GaussianNoise gaussianNoiseArray[]; 
} ugn;


layout( local_size_x = 32, local_size_y = 32 ) in;

layout(binding = 4, rg32f) writeonly uniform image2D imageForHk0;
layout(binding = 6, rg32f) writeonly uniform image2D imageForHk0minus;

vec2 Conjugate(vec2 v)
{
	return vec2(v.x, -v.y);
}

float PhillipsSpectrum(vec2 k)
{
	float kLength = length(k);
	if(kLength < 0.00001)		// Avoid smaller waves
	{
		kLength = 0.00001;
		k = vec2(0.00001,0.00001);
	}
	float L = (pc.windSpeed * pc.windSpeed) / gravity;
	float kLengthsq = kLength * kLength;
	float exponent = exp(-1.0 / (kLengthsq * (L*L)));

	float wk = dot(normalize(k), normalize(pc.windDirection));
	float wksq = pow(wk,4);	
	
	return pc.scalePhillips * (exponent / (kLengthsq * kLengthsq)) * wksq * exp(-kLengthsq * pow(L/2000.0,2));
}

void main() {

	vec2 nm = vec2(ivec2(gl_GlobalInvocationID.xy) - (float(pc.fourierGridSize)/2.0));
	int spatialDim = pc.spatialDimension;
	if(spatialDim <= 0) spatialDim = 1;
	vec2 k = vec2((2 * PI * nm.x) / spatialDim, (2 * PI * nm.y) / spatialDim);	

	uint index = gl_GlobalInvocationID.x * pc.fourierGridSize + gl_GlobalInvocationID.y;

	float h0k = (1/sqrt(2)) * sqrt(PhillipsSpectrum(k));
	vec2 h0kvalue = h0k * ugn.gaussianNoiseArray[index].gaussianNoiseVector.xy ;
	imageStore(imageForHk0, ivec2(gl_GlobalInvocationID.xy), vec4(h0kvalue,0,1));


	float h0kminus = (1/sqrt(2)) * sqrt(PhillipsSpectrum(k*-1));
	vec2 h0kminusValue = h0kminus * ugn.gaussianNoiseArray[index].gaussianNoiseVector.zw;
	imageStore(imageForHk0minus, ivec2(gl_GlobalInvocationID.xy), vec4(Conjugate(h0kminusValue),0,1));	
}
